/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Exchange.Matching.server;
import Exchange.Matching.server.*;

import java.io.DataInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.xml.parsers.*;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

public class Server {
    private ServerSocket socket;
    private CheckExcute checkExcute;
    private Proxy proxy;
    private static int task_id;
    private static db stockDB;

    public Server() throws IOException, SQLException{
        socket=new ServerSocket(12345);
        proxy=new Proxy();
        task_id=0;
        stockDB = new db();
    }

    public void listen() throws Exception{
        Socket socket=this.socket.accept();
        task_id++;
        new Thread(new Task(socket,task_id)).start();
    }

    public void send() throws Exception{
        try{
            OutputStream response=this.socket.getOutputStream();
            response.write("test1\n"+"test2\n".getBytes());
            response.flush();
        }catch(Exception e){
            e.printStackTrace();
        }    
    }

    class Task implements Runnable{
        private Socket socket;
        private DataInputStream Trans;
        private FileOutputStream fileout;
        private int task_id;
        public Task(Socket socket,int task_id){
            this.socket=socket;
            this.task_id=task_id;

        }
        
        @Override
        public void run(){
            try{
                // InputStreamReader reader=new InputStreamReader(socket.getInputStream());
                // System.out.println((char)reader.read());
                Trans=new DataInputStream(socket.getInputStream());
                long fileLen=Trans.readLong();
                System.out.println(fileLen);

                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                DocumentBuilder builder = factory.newDocumentBuilder();
                Document doc=builder.parse(Trans);
                switch (doc.getFirstChild().getNodeName()){
                    case "create" :
                        proxy.create_parse(doc.getFirstChild());
                        break;
                    case "transactions":
                        proxy.transactions_parse(doc.getFirstChild());
                        break;
                }
                for (Entry<String, Object> e:proxy.getTocheck().entrySet()){
                    checkExcute.visit(e);
                }


            }catch(Exception e){
                e.printStackTrace();
            }finally{
                try{
                    socket.send();
                    socket.close();
                }catch(Exception e){

                }
            }
        }
    }

    

    public void checkRule(){}
    
    public static void main(String[] args) throws SQLException {
        try{
            Server server=new Server();
            server.listen();
        }catch(Exception e){
            e.printStackTrace();
        }
    }
}
